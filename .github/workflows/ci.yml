name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  validate-powershell:
    name: Validate PowerShell Scripts
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck

      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck

      - name: Validate PowerShell syntax
        shell: pwsh
        run: |
          $ast = [System.Management.Automation.Language.Parser]::ParseFile("./NetWatch.ps1", [ref]$null, [ref]$null)
          if ($ast) {
            Write-Host "✓ NetWatch.ps1 syntax is valid"
          } else {
            Write-Error "NetWatch.ps1 syntax validation failed"
            exit 1
          }

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./NetWatch.ps1 -Severity Error
          if ($results) {
            $results | Format-Table -AutoSize
            Write-Error "PSScriptAnalyzer found errors"
            exit 1
          }
          Write-Host "✓ PSScriptAnalyzer passed (no errors)"

      - name: Run Pester tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = './NetWatch.Tests.ps1'
          $config.Run.Exit = $true
          $config.Output.Verbosity = 'Detailed'
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = 'test-results.xml'
          
          Invoke-Pester -Configuration $config

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: powershell-test-results
          path: test-results.xml

  validate-python:
    name: Validate Python Scripts
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fritzconnection

      - name: Validate Python syntax
        run: |
          python -m py_compile fritzlog_pull.py
          python -m py_compile analyze_netlogs.py
          echo "✓ Python syntax validation passed"

      - name: Test imports
        run: |
          python -c "import fritzlog_pull; print('✓ fritzlog_pull.py imports successfully')"
          python -c "import analyze_netlogs; print('✓ analyze_netlogs.py imports successfully')"

      - name: Test CLI help
        run: |
          python fritzlog_pull.py --help
          python analyze_netlogs.py --help
          echo "✓ CLI help commands work"

  lint-python:
    name: Lint Python Code
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint

      - name: Run flake8
        run: |
          # Stop on errors, but allow warnings
          flake8 *.py --count --select=E9,F63,F7,F82 --show-source --statistics
          # Full report (exit-zero treats all errors as warnings)
          flake8 *.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  all-checks-complete:
    name: All Checks Complete
    runs-on: windows-latest
    needs: [validate-powershell, validate-python, lint-python, security-scan]
    if: always()
    steps:
      - name: Check all jobs
        shell: pwsh
        run: |
          $failed = $false
          if ("${{ needs.validate-powershell.result }}" -ne "success") { $failed = $true }
          if ("${{ needs.validate-python.result }}" -ne "success") { $failed = $true }
          if ("${{ needs.lint-python.result }}" -ne "success") { $failed = $true }
          
          if ($failed) {
            Write-Host "❌ Some checks failed"
            exit 1
          }
          Write-Host "✅ All checks passed successfully"
