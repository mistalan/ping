name: Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  package:
    name: Package Scripts
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fritzconnection

      - name: Validate scripts
        run: |
          python -m py_compile fritzlog_pull.py
          python -m py_compile analyze_netlogs.py
          python -c "import fritzlog_pull"
          python -c "import analyze_netlogs"

      - name: Validate PowerShell script
        shell: pwsh
        run: |
          Write-Host "==> Validating PowerShell scripts..."
          
          $scripts = @("NetWatch.ps1", "NetWatchUI.ps1")
          $allValid = $true
          
          foreach ($script in $scripts) {
            Write-Host "==> Validating $script..."
            $errors = $null
            $ast = [System.Management.Automation.Language.Parser]::ParseFile("./$script", [ref]$null, [ref]$errors)
            
            if ($errors -and $errors.Count -gt 0) {
              Write-Error "Syntax errors in ${script}:"
              $errors | ForEach-Object { Write-Error $_.Message }
              $allValid = $false
            } elseif (-not $ast) {
              Write-Error "$script syntax validation failed"
              $allValid = $false
            } else {
              Write-Host "[PASS] $script syntax is valid"
            }
          }
          
          if (-not $allValid) {
            exit 1
          }

      - name: Set up JDK 17 for Android
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x FritzBoxRestart/gradlew

      - name: Build Android APK
        working-directory: FritzBoxRestart
        run: ./gradlew assembleDebug --stacktrace

      - name: Verify APK build
        run: |
          if [ -f FritzBoxRestart/app/build/outputs/apk/debug/app-debug.apk ]; then
            echo "APK built successfully"
            ls -lh FritzBoxRestart/app/build/outputs/apk/debug/app-debug.apk
          else
            echo "APK build failed"
            exit 1
          fi

      - name: Create deployment package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package | Out-Null
          
          # Copy scripts
          Copy-Item NetWatch.ps1 package/
          Copy-Item NetWatchUI.ps1 package/
          Copy-Item fritzlog_pull.py package/
          Copy-Item fritzbox_restart.py package/
          Copy-Item analyze_netlogs.py package/
          Copy-Item visualize_incidents.py package/
          Copy-Item README.md package/
          
          # Copy Android APK if it exists
          if (Test-Path "FritzBoxRestart/app/build/outputs/apk/debug/app-debug.apk") {
            New-Item -ItemType Directory -Force -Path package/android | Out-Null
            Copy-Item FritzBoxRestart/app/build/outputs/apk/debug/app-debug.apk package/android/fritzbox-restart.apk
            Copy-Item FritzBoxRestart/README.md package/android/
            Write-Host "[INFO] Android APK included in package"
          } else {
            Write-Host "[WARNING] Android APK not found, skipping"
          }
          
          # Create requirements.txt
          "fritzconnection>=1.15.0" | Out-File -FilePath package/requirements.txt -Encoding utf8
          
          # Create quick start guide
          @'
          # Quick Start Guide
          
          ## Network Monitor UI (Recommended)
          
          Double-click `NetWatchUI.ps1` or run:
          
          ```powershell
          .\NetWatchUI.ps1
          ```
          
          This opens a graphical interface to configure and control all monitoring tools.
          
          ## Command Line Usage
          
          ### Windows Network Monitor
          
          ```powershell
          .\NetWatch.ps1 -IntervalSeconds 30
          ```
          
          Stop with Ctrl+C. Logs saved to `~/Ping/Log/netwatch_log.csv`
          
          ### FRITZ!Box Logger
          
          ```bash
          pip install -r requirements.txt
          python3 fritzlog_pull.py --password YOUR_PASSWORD
          ```
          
          Stop with Ctrl+C. Logs saved to `~/Ping/Log/fritz_status_log.csv`
          
          ### Analyze Logs
          
          ```bash
          python3 analyze_netlogs.py \
            --netwatch ~/Ping/Log/netwatch_log.csv \
            --fritz ~/Ping/Log/fritz_status_log.csv \
            --out incidents.csv
          ```
          
          Results saved to `incidents.csv`
          
          ## Need Help?
          
          See README.md for complete documentation.
          '@ | Out-File -FilePath package/QUICKSTART.md -Encoding utf8

      - name: Generate package metadata
        shell: pwsh
        run: |
          @"
          Package: ping network monitoring tools
          Build Date: $((Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC"))
          Git Commit: ${{ github.sha }}
          Git Branch: ${{ github.ref_name }}
          Build Number: ${{ github.run_number }}
          Build ID: ${{ github.run_id }}
          "@ | Out-File -FilePath package\PACKAGE_INFO.txt -Encoding utf8

      - name: Create ZIP archive
        shell: pwsh
        run: |
          Compress-Archive -Path package\* -DestinationPath ping-latest.zip

      - name: Create tarball
        shell: bash
        run: |
          cd package
          tar -czf ../ping-latest.tar.gz .
          cd ..

      - name: Generate checksums
        shell: pwsh
        run: |
          (Get-FileHash ping-latest.zip -Algorithm SHA256).Hash.ToLower() + "  ping-latest.zip" | Out-File -FilePath checksums-latest.txt -Encoding utf8
          (Get-FileHash ping-latest.tar.gz -Algorithm SHA256).Hash.ToLower() + "  ping-latest.tar.gz" | Out-File -FilePath checksums-latest.txt -Append -Encoding utf8
          Get-Content checksums-latest.txt

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: ping-latest-zip
          path: ping-latest.zip
          retention-days: 90

      - name: Upload tarball artifact
        uses: actions/upload-artifact@v4
        with:
          name: ping-latest-tarball
          path: ping-latest.tar.gz
          retention-days: 90

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: ping-latest-checksums
          path: checksums-latest.txt
          retention-days: 90

      - name: Summary
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### ðŸ“¦ Deployment Package Created"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Build Information:**"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- Commit: ``${{ github.sha }}``"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- Branch: ``${{ github.ref_name }}``"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- Run: #${{ github.run_number }}"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Package Contents:**"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- NetWatchUI.ps1 (Main UI - Recommended)"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- NetWatch.ps1"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- fritzlog_pull.py"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- fritzbox_restart.py"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- analyze_netlogs.py"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- visualize_incidents.py"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- README.md"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- requirements.txt"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- QUICKSTART.md"
          if (Test-Path "package/android/fritzbox-restart.apk") {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- android/fritzbox-restart.apk (Android App)"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "- android/README.md"
          }
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Checksums:**"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'
          Get-Content checksums-latest.txt | ForEach-Object { Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ }
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'
