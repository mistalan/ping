name: Multi-Platform Testing

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 12 * * *'  # Run daily at noon UTC
  workflow_dispatch:

jobs:
  test-powershell-cross-platform:
    name: Test PowerShell on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PowerShell (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          pwsh --version || echo "PowerShell not pre-installed"

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck

      - name: Validate syntax
        shell: pwsh
        run: |
          $ast = [System.Management.Automation.Language.Parser]::ParseFile("./NetWatch.ps1", [ref]$null, [ref]$null)
          if ($ast) {
            Write-Host "✓ Syntax validation passed on ${{ matrix.os }}"
          } else {
            Write-Error "Syntax validation failed"
            exit 1
          }

      - name: Run Pester tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = './NetWatch.Tests.ps1'
          $config.Run.Exit = $true
          $config.Output.Verbosity = 'Detailed'
          Invoke-Pester -Configuration $config

  test-python-versions:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fritzconnection

      - name: Test fritzlog_pull.py
        run: |
          python -m py_compile fritzlog_pull.py
          python -c "import fritzlog_pull; print('✓ Import successful')"
          python fritzlog_pull.py --help

      - name: Test analyze_netlogs.py
        run: |
          python -m py_compile analyze_netlogs.py
          python -c "import analyze_netlogs; print('✓ Import successful')"
          python analyze_netlogs.py --help

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test-powershell-cross-platform, test-python-versions]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install fritzconnection

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck

      - name: Run all validations
        run: |
          echo "Testing Python scripts..."
          python -m py_compile fritzlog_pull.py
          python -m py_compile analyze_netlogs.py
          python fritzlog_pull.py --help > /dev/null
          python analyze_netlogs.py --help > /dev/null
          echo "✓ Python validations passed"

      - name: Run PowerShell tests
        shell: pwsh
        run: |
          Write-Host "Testing PowerShell script..."
          $config = New-PesterConfiguration
          $config.Run.Path = './NetWatch.Tests.ps1'
          $config.Run.Exit = $true
          $config.Output.Verbosity = 'Normal'
          Invoke-Pester -Configuration $config
          Write-Host "✓ PowerShell tests passed"

      - name: Summary
        run: |
          echo "### ✅ Integration Tests Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All scripts validated successfully across:" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "- PowerShell syntax and tests" >> $GITHUB_STEP_SUMMARY
